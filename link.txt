network-documentation/extra-guides/rust-learning-resources.md:69:  * Check out the Learn tutorial - [Write and deploy a smart contract in Rust](https://learn.figment.io/network-documentation/near/tutorials/write-and-deploy-a-smart-contract-on-near)
network-documentation/celo/tutorial/build-a-dao-on-celo.md:611:Note: If you have never built an app using React Native to connect to the Celo wallet before, you can follow the guide [here](https://learn.figment.io/network-documentation/celo/tutorial/how-to-successfully-connect-to-a-celo-wallet-with-a-react-native-dapp#project-setup%20).
network-documentation/celo/tutorial/celo-truffle-deploy.md:303:Now that you've learned how to deploy smart contracts on Celo, you can build new use cases for the cryptoeconomy on Celo. Feel free to learn more Solidity, or continue the tutorials on [Figment Learn](https://learn.figment.io).
network-documentation/celo/tutorial/deploying-smart-contracts-on-celo-with-truffle.md:301:Now that you've learned how to deploy smart contracts on Celo using Truffle, you can build new use cases for the cryptoeconomy on Celo! To learn more Solidity, check out Solidity by Example. You can also continue the other tutorials on [Figment Learn](https://learn.figment.io/).
network-documentation/celo/tutorial/how-to-run-a-celo-full-node-in-a-virtual-machine.md:132:To learn about `.env` files check out this [guide](https://learn.figment.io/network-documentation/extra-guides/dotenv-and-.env).
network-documentation/celo/tutorial/create-vault-smart-contract.md:18:  - [Connect to Celo node with DataHub](https://learn.figment.io/network-documentation/celo/tutorial/1.connect)
network-documentation/celo/tutorial/create-vault-smart-contract.md:19:  - [Query the Celo Network](https://learn.figment.io/network-documentation/celo/tutorial/3.query)
network-documentation/celo/tutorial/create-vault-smart-contract.md:20:  - [Submit your first transactions](https://learn.figment.io/network-documentation/celo/tutorial/4.transactions)
network-documentation/celo/tutorial/distributed-file-manager-using-ipfs-celo-reactjs.md:272:Create a `.env` file in the project root folder. Please take a note that dot \(.\) is necessary for the `.env` file name. Now copy your Celo wallet's mnemonic in the .env file as shown below. In the .env file, **MNEMONIC** should be enclosed within double-quotes \(" "\). If you are facing any difficulty in setting up .env file then please refer to **Extra Guides** on [dotenv and .env](https://learn.figment.io/network-documentation/extra-guides/dotenv-and-.env).
network-documentation/celo/tutorial/celo-complete-dao-dapp/create-a-react-native-app.md:13:If you have not built an app using React Native to connect to the Celo wallet before, you can follow the guide [here](https://learn.figment.io/network-documentation/celo/tutorial/how-to-successfully-connect-to-a-celo-wallet-with-a-react-native-dapp#project-setup
network-documentation/celo/tutorial/how-to-build-a-dao-on-celo/building-the-react-native-app.md:3:Note: If you have never built an app using React Native to connect to the Celo wallet before, you can follow the guide [here](https://learn.figment.io/network-documentation/celo/tutorial/how-to-successfully-connect-to-a-celo-wallet-with-a-react-native-dapp#project-setup%20).
network-documentation/avalanche/tutorials/creating-an-nft-part-1.md:17:Each NFT belongs to a **family**, which has a name and a symbol. Each family is composed of **groups**. The number of groups in a family is specified when the family is created. Our NFT will exist on the X-Chain, so to create our NFT family we’ll call `avm.createNFTAsset`, which is a method of the [X-Chain’s API.](https://learn.figment.io/network-documentation/avalanche/rpc-and-rest-api/avm-api)
network-documentation/avalanche/tutorials/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask.md:7:Avalanche's Primary Network is a subnet that has three chains: P-Chain, X-Chain, and C-Chain. The C-Chain is an instance of the Ethereum Virtual Machine powered by Avalanche’s Snowman consensus protocol. The [C-Chain RPC](https://learn.figment.io/network-documentation/avalanche/rpc-and-rest-api/evm-api) can do anything a typical Ethereum client can by using the Ethereum-standard RPC calls. The immediate benefits of using the C-Chain rather than Ethereum are all of the benefits of using Avalanche. These properties could considerably improve the performance of DApps and the user experience.
network-documentation/avalanche/tutorials/unit-testing-in-solidity.md:11:This tutorial builds on a previously written tutorial on avalanche, so before we proceed any further make sure to complete - [Making an advanced e-Voting dApp on Avalanche Fuji network using Trufflesuite](https://learn.figment.io/network-documentation/avalanche/tutorials/making-advanced-e-voting-dapp-avalanche-fuji-using-trufle).
network-documentation/avalanche/tutorials/using-hardhat-with-the-avalanche-c-chain.md:13:* [Avash Installation](https://learn.figment.io/network-documentation/avalanche/tutorials/local-avalanche-network-using-avash)
network-documentation/avalanche/tutorials/advanced-evoting-avalanche-reactjs.md:3:In the tutorial [Making advanced e-voting dApp](https://learn.figment.io/network-documentation/avalanche/tutorials/making-advanced-e-voting-dapp-avalanche-fuji-using-trufle) we have learned to build smart contracts, deploy them on Avalanche and interact with them using jQuery.
network-documentation/avalanche/tutorials/advanced-evoting-avalanche-reactjs.md:189:Create a `.env` file in the project root folder. Please take a note that dot \(.\) is necessary for the `.env` file name. Now copy your Datahub's Avalanche API key and the Avalanche wallet's mnemonic in the .env file as shown below. In the .env file, **MNEMONIC** should be enclosed within double-quotes \(" "\). If you are facing any difficulty in setting up .env file then please refer to **Extra Guides** on [dotenv and .env](https://learn.figment.io/network-documentation/extra-guides/dotenv-and-.env).
network-documentation/avalanche/tutorials/nft-tutorials/creating-an-nft-part-1.md:23:Each NFT belongs to a **family**, which has a name and a symbol. Each family is composed of **groups**. The number of groups in a family is specified when the family is created. Our NFT will exist on the X-Chain, so to create our NFT family we’ll call `avm.createNFTAsset`, which is a method of the [X-Chain’s API.](https://learn.figment.io/network-documentation/avalanche/rpc-and-rest-api/avm-api)
network-documentation/avalanche/tutorials/nft-tutorials/create-nfts-with-the-avalanche-wallet.md:87:Now, you should know how to create NFT families, mint NFT groups, and send them to other addresses. Have fun with it! If you would like to know the technical background of how NFTs work on the Avalanche network or would like to build products using NFTs, please check out the [NFT tutorial](https://learn.figment.io/network-documentation/avalanche/tutorials/creating-an-nft-part-1). 
network-documentation/avalanche/tutorials/nft-tutorials/create-nft-with-royalties.md:11:In preparation for the tutorial, you will need to have a basic understanding of [Remix IDE](https://remix.ethereum.org/) and Solidity [smart contracts](https://solidity-by-example.org/). Please refer to the Avalanche [smart contract tutorial](https://learn.figment.io/network-documentation/avalanche/tutorials/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask) for more information on the Avalanche wallet.
network-documentation/avalanche/tutorials/nft-tutorials/create-nft-with-royalties.md:106:Next, download and install the Metamask wallet for your browser. Create a new wallet in Metamask, then [follow our quick guide](https://learn.figment.io/network-documentation/avalanche/tutorials/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask#step-1-setting-up-metamask) to connect to the Avalanche Fuji C-Chain. You will need to have a valid DataHub API key for Avalanche. 
network-documentation/avalanche/tutorials/nft-tutorials/create-nft-with-royalties.md:126:Thank you for completing this tutorial, you should now know how to create an NFT with royalties on Avalanche using a simple Solidity smart contract. Have fun with it! If you would like to know the technical background of how NFTs work on the Avalanche network or would like to build products using NFTs, please check out this [Avalanche NFT tutorial](https://learn.figment.io/network-documentation/avalanche/tutorials/create-mint-transfer-nft)!.
network-documentation/avalanche/tutorials/nft-tutorials/create-mint-transfer-nft.md:131:Now, you should know how to create families of collectible NFTs, mint NFTs in groups, and send them to other addresses. Have fun with it! If you would like to know the technical background of how NFTs work on the Avalanche network or would like to build products using NFTs, please check out this [Avalanche NFT tutorial](https://learn.figment.io/network-documentation/avalanche/tutorials/creating-an-nft-part-1)!.
network-documentation/avalanche/tutorials/dapp-tutorials/advanced-evoting-avalanche-reactjs.md:3:In the tutorial [Making advanced e-voting dApp](https://learn.figment.io/network-documentation/avalanche/tutorials/making-advanced-e-voting-dapp-avalanche-fuji-using-trufle) we have learned to build smart contracts, deploy them on Avalanche and interact with them using jQuery.
network-documentation/avalanche/tutorials/dapp-tutorials/advanced-evoting-avalanche-reactjs.md:189:Create a `.env` file in the project root folder. Please take a note that dot \(.\) is necessary for the `.env` file name. Now copy your Datahub's Avalanche API key and the Avalanche wallet's mnemonic in the .env file as shown below. In the .env file, **MNEMONIC** should be enclosed within double-quotes \(" "\). If you are facing any difficulty in setting up .env file then please refer to **Extra Guides** on [dotenv and .env](https://learn.figment.io/network-documentation/extra-guides/dotenv-and-.env).
network-documentation/avalanche/tutorials/dapp-tutorials/create-a-chat-application-using-solidity-and-react.md:8:* Should've completed [Deploy a Smart Contract on Avalanche using Remix and MetaMask](https://learn.figment.io/network-documentation/avalanche/tutorials/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask) tutorial
network-documentation/avalanche/tutorials/dapp-tutorials/making-advanced-e-voting-dapp-avalanche-fuji-using-trufle.md:3:In the last tutorial on [Making a basic e-voting DApp on Avalanche's Fuji C-Chain](https://learn.figment.io/network-documentation/avalanche/tutorials/making-evoting-dapp-on-avalanche-c-chain-using-truffle), we have learnt how to deploy a smart contract on Avalanche's Fuji C-Chain using Trufflesuite. Along with that we have also coded the client-side application, to easily interact with smart contracts.
network-documentation/avalanche/tutorials/dapp-tutorials/making-advanced-e-voting-dapp-avalanche-fuji-using-trufle.md:11:You've created an [Avalanche DataHub](https://datahub.figment.io/sign_up?service=avalanche) account and are familiar with [Avalanche's architecture](https://docs.avax.network/learn/platform-overview). Along with that, you've have followed the tutorial on [Making a basic e-voting DApp on Avalanche's Fuji C-Chain](https://learn.figment.io/network-documentation/avalanche/tutorials/making-evoting-dapp-on-avalanche-c-chain-using-truffle), though for the sake of completeness, we will be covering everything from start.
network-documentation/avalanche/tutorials/dapp-tutorials/making-advanced-e-voting-dapp-avalanche-fuji-using-trufle.md:928:* Don't forget to setup Metamask with `Fuji` testnet and also fund the account with Fuji c-chain test tokens in order to vote. Please refer to this tutorial on [Connecting Datahub to Metamask](https://learn.figment.io/network-documentation/avalanche/tutorials/connect-datahub-to-metamask). You may change address in the Metamask wallet and fund them in order to vote again.
network-documentation/avalanche/tutorials/dapp-tutorials/making-evoting-dapp-on-avalanche-c-chain-using-truffle.md:576:* Don't forget to setup Metamask with `Fuji` testnet and also fund the account with Fuji c-chain test tokens in order to vote. Please refer to this tutorial on [Connecting Datahub to Metamask](https://learn.figment.io/network-documentation/avalanche/tutorials/connect-datahub-to-metamask). You may change address in the Metamask wallet and fund them in order to vote again.
network-documentation/avalanche/tutorials/create-a-dex-with-avalanche.md:7:You must have gone through this tutorial [Create a Local Test Network on Avalanche](https://learn.figment.io/network-documentation/avalanche/tutorials/platform-overview/create-a-local-test-network) and have performed a cross-chain swap via the [Transfer AVAX Between X-Chain and C-Chain](https://learn.figment.io/network-documentation/avalanche/tutorials/token-transfer-tutorials/transfer-avax-between-the-x-chain-and-c-chain) tutorial to get AVAX test tokens to your C-Chain address.
network-documentation/avalanche/tutorials/create-a-dex-with-avalanche.md:708:- https://learn.figment.io/network-documentation/avalanche/tutorials/getting-started-with-smart-contracts-development/using-truffle-with-the-avalanche-c-chain
network-documentation/avalanche/tutorials/creating-a-fixed-cap-asset.md:15:Our asset will exist on the [X-Chain](https://docs.avax.network/learn/platform-overview#exchange-chain-x-chain), so to create our asset we’ll call `avm.createFixedCapAsset`, a method of the [X-Chain’s API.](https://learn.figment.io/network-documentation/avalanche/rpc-and-rest-api/avm-api)
network-documentation/avalanche/tutorials/create-nfts-with-the-avalanche-wallet.md:87:Now, you should know how to create NFT families, mint NFT groups, and send them to other addresses. Have fun with it! If you would like to know the technical background of how NFTs work on the Avalanche network or would like to build products using NFTs, please check out the [NFT tutorial](https://learn.figment.io/network-documentation/avalanche/tutorials/creating-an-nft-part-1). 
network-documentation/avalanche/tutorials/create-a-chat-application-using-solidity-and-react.md:9:* Should've completed [Deploy a Smart Contract on Avalanche using Remix and MetaMask](https://learn.figment.io/network-documentation/avalanche/tutorials/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask) tutorial
network-documentation/avalanche/tutorials/create-nft-with-royalties.md:11:In preparation for the tutorial, you will need to have a basic understanding of [Remix IDE](https://remix.ethereum.org/) and Solidity [smart contracts](https://solidity-by-example.org/). Please refer to the Avalanche [smart contract tutorial](https://learn.figment.io/network-documentation/avalanche/tutorials/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask) for more information on the Avalanche wallet.
network-documentation/avalanche/tutorials/create-nft-with-royalties.md:106:Next, download and install the Metamask wallet for your browser. Create a new wallet in Metamask, then [follow our quick guide](https://learn.figment.io/network-documentation/avalanche/tutorials/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask#step-1-setting-up-metamask) to connect to the Avalanche Fuji C-Chain. You will need to have a valid DataHub API key for Avalanche. 
network-documentation/avalanche/tutorials/create-nft-with-royalties.md:125:Thank you for completing this tutorial, you should now know how to create an NFT with royalties on Avalanche using a simple Solidity smart contract. Have fun with it! If you would like to know the technical background of how NFTs work on the Avalanche network or would like to build products using NFTs, please check out this [Avalanche NFT tutorial](https://learn.figment.io/network-documentation/avalanche/tutorials/create-mint-transfer-nft)!.
network-documentation/avalanche/tutorials/making-advanced-e-voting-dapp-avalanche-fuji-using-trufle.md:3:In the last tutorial on [Making a basic e-voting DApp on Avalanche's Fuji C-Chain](https://learn.figment.io/network-documentation/avalanche/tutorials/making-evoting-dapp-on-avalanche-c-chain-using-truffle), we have learnt how to deploy a smart contract on Avalanche's Fuji C-Chain using Trufflesuite. Along with that we have also coded the client-side application, to easily interact with smart contracts.
network-documentation/avalanche/tutorials/making-advanced-e-voting-dapp-avalanche-fuji-using-trufle.md:11:You've created an [Avalanche DataHub](https://datahub.figment.io/sign_up?service=avalanche) account and are familiar with [Avalanche's architecture](https://docs.avax.network/learn/platform-overview). Along with that, you've have followed the tutorial on [Making a basic e-voting DApp on Avalanche's Fuji C-Chain](https://learn.figment.io/network-documentation/avalanche/tutorials/making-evoting-dapp-on-avalanche-c-chain-using-truffle), though for the sake of completeness, we will be covering everything from start.
network-documentation/avalanche/tutorials/making-advanced-e-voting-dapp-avalanche-fuji-using-trufle.md:931:* Don't forget to setup Metamask with `Fuji` testnet and also fund the account with Fuji c-chain test tokens in order to vote. Please refer to this tutorial on [Connecting Datahub to Metamask](https://learn.figment.io/network-documentation/avalanche/tutorials/connect-datahub-to-metamask). You may change address in the Metamask wallet and fund them in order to vote again.
network-documentation/avalanche/tutorials/platform-overview/creating-a-fixed-cap-asset.md:15:Our asset will exist on the [X-Chain](https://docs.avax.network/learn/platform-overview#exchange-chain-x-chain), so to create our asset we’ll call `avm.createFixedCapAsset`, a method of the [X-Chain API](https://learn.figment.io/network-documentation/avalanche/rpc-and-rest-api/avm-api).
network-documentation/avalanche/tutorials/platform-overview/creating-a-variable-cap-asset.md:21:Our asset will exist on the X-Chain, so to create our asset we’ll call `avm.createVariableCapAsset`, which is a method of the [X-Chain’s API.](https://learn.figment.io/network-documentation/avalanche/rpc-and-rest-api/avm-api)
network-documentation/avalanche/tutorials/making-evoting-dapp-on-avalanche-c-chain-using-truffle.md:576:* Don't forget to setup Metamask with `Fuji` testnet and also fund the account with Fuji c-chain test tokens in order to vote. Please refer to this tutorial on [Connecting Datahub to Metamask](https://learn.figment.io/network-documentation/avalanche/tutorials/connect-datahub-to-metamask). You may change address in the Metamask wallet and fund them in order to vote again.
network-documentation/avalanche/tutorials/creating-a-variable-cap-asset.md:21:Our asset will exist on the X-Chain, so to create our asset we’ll call `avm.createVariableCapAsset`, which is a method of the [X-Chain’s API.](https://learn.figment.io/network-documentation/avalanche/rpc-and-rest-api/avm-api)
network-documentation/avalanche/tutorials/create-mint-transfer-nft.md:131:Now, you should know how to create families of collectible NFTs, mint NFTs in groups, and send them to other addresses. Have fun with it! If you would like to know the technical background of how NFTs work on the Avalanche network or would like to build products using NFTs, please check out this [Avalanche NFT tutorial](https://learn.figment.io/network-documentation/avalanche/tutorials/creating-an-nft-part-1)!.
network-documentation/avalanche/tutorials/create-a-new-blockchain.md:13:[This tutorial](https://learn.figment.io/network-documentation/avalanche/tutorials/create-a-subnet) will guide you through creating a Subnet.
network-documentation/avalanche/tutorials/create-a-new-blockchain.md:29:The [AVM’s documentation](https://learn.figment.io/network-documentation/avalanche/rpc-and-rest-api/avm-api) specifies that the argument to `avm.buildGenesis` should look like this:
network-documentation/avalanche/tutorials/getting-started-with-smart-contracts-development/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask.md:7:Avalanche's Primary Network is a subnet that has three chains: P-Chain, X-Chain, and C-Chain. The C-Chain is an instance of the Ethereum Virtual Machine powered by Avalanche’s Snowman consensus protocol. The [C-Chain RPC](https://learn.figment.io/network-documentation/avalanche/rpc-and-rest-api/evm-api) can do anything a typical Ethereum client can by using the Ethereum-standard RPC calls. The immediate benefits of using the C-Chain rather than Ethereum are all of the benefits of using Avalanche. These properties could considerably improve the performance of DApps and the user experience.
network-documentation/avalanche/tutorials/getting-started-with-smart-contracts-development/unit-testing-in-solidity.md:11:This tutorial builds on a previously written tutorial on avalanche, so before we proceed any further make sure to complete [Making an advanced e-Voting dApp on Avalanche Fuji network using Trufflesuite](https://learn.figment.io/network-documentation/avalanche/tutorials/making-advanced-e-voting-dapp-avalanche-fuji-using-trufle).
network-documentation/avalanche/tutorials/getting-started-with-smart-contracts-development/using-hardhat-with-the-avalanche-c-chain.md:13:* [Avash Installation](https://learn.figment.io/network-documentation/avalanche/tutorials/local-avalanche-network-using-avash)
network-documentation/avalanche/rpc-and-rest-api/evm-api.md:9:For a tutorial on deploying a Solidity smart contract on the C-Chain, see[ here](https://learn.figment.io/network-documentation/avalanche/tutorials/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask).
network-documentation/avalanche/rpc-and-rest-api/avm-api.md:346:See [this tutorial](https://learn.figment.io/network-documentation/avalanche/tutorials/creating-a-fixed-cap-asset) for an example of usage.
network-documentation/polkadot/parachain-lifecycle.md:9:It is recommended that you are have gone through the [Polkadot Blockchain Terms](https://learn.figment.io/network-documentation/polkadot/polkadot-blockchain-terms) guide and are familiar with the following:
network-documentation/near/tutorials/nft-marketplace-in-assemblyscript.md:13:* Install Node.js and NPM [\(see Tutorial 1\)](https://learn.figment.io/network-documentation/near/tutorials/1.-connecting-to-a-near-node-using-datahub)
network-documentation/near/tutorials/nft-marketplace-in-assemblyscript.md:14:* Install the NEAR CLI [\(see Tutorial 2\)](https://learn.figment.io/network-documentation/near/tutorials/2.-creating-your-first-near-account-using-the-sdk)
network-documentation/near/tutorials/nft-marketplace-in-assemblyscript.md:15:* Complete the first NEAR smart contract tutorial [\(see Tutorial 5\)](https://learn.figment.io/network-documentation/near/tutorials/5.-writing-and-deploying-your-first-near-smart-contract)
network-documentation/near/tutorials/nft-marketplace-in-assemblyscript.md:16:* Complete the intro to NFTs on NEAR [\(see Tutorial\)](https://learn.figment.io/network-documentation/near/tutorials/write-nft-contracts-in-rust)
network-documentation/near/tutorials/write-and-deploy-a-smart-contract-on-near.md:17:* NEAR Testnet account \(If you don't have testnet account, check this guide [HERE](https://learn.figment.io/network-documentation/near/near-wallet)\)
network-documentation/near/tutorials/1-project_overview/5-account-storage.md:1:[Storage staking](https://docs.near.org/docs/concepts/storage-staking) is an issue that needs to be addressed by any multi-user contract that allocates storage for the user on the blockchain. This issue first arose while designing the [Fungible Token Core Standard - NEP-141](https://learn.figment.io/network-documentation/near/tutorials/1-project_overview/2-fungible-token#what-does-account-registration-have-to-do-with-fungible-tokens). Once NEP-141 was finalized, the NEAR community circled back to work on this problem. In this tutorial, I will summarize the lengthy [online discussion](https://github.com/near/NEPs/discussions/145) and present to you the fruits of our labor.
network-documentation/near/tutorials/1-project_overview/4-stake-fungible-token-testing.md:697:Circling back to the [Fungible Token Core Standard NEP-141](https://learn.figment.io/network-documentation/near/tutorials/1-project_overview/2-fungible-token), I mentioned a need for account registration as part of the full FT solution. The NEAR community discussion on the account registration topic has been awesome. It has led to a different path that focuses on the storage staking problem specifically - we are now calling it the [Account Storage Standard](https://github.com/near/NEPs/discussions/145#discussioncomment-342580). I expect the standard to soon be finalized. Once the community has reached consensus and finalized the new standard, I'll follow up and write it all up here for you.
network-documentation/near/tutorials/1-project_overview/9-stake-pool-for-validators.md:41:The storage management API implements the NEAR standard NEP-145, which I have covered in depth my prior [Account Storage Standard](https://learn.figment.io/network-documentation/near/tutorials/1-project_overview/5-account-storage) tutorial. Proper storage management is crucial to safegaurd any multi-user contract from what I call a "Denial of Storage" attack. Storage management closes a big security vulnerability in the first generation staking pool contracts that are currently in use. The attack is very simple based on the facts:
network-documentation/near/tutorials/1-project_overview/9-stake-pool-for-validators.md:327:* [The New and Improved Fungible Token Standard \(NEP-141\) Has Arrived](https://learn.figment.io/network-documentation/near/tutorials/1-project_overview/2-fungible-token)
network-documentation/near/tutorials/1-project_overview/9-stake-pool-for-validators.md:474:\[11\]: [https://learn.figment.io/network-documentation/near/tutorials/1-project\_overview/8-stake-pool-contract\#how-to-operate-the-stake-pool-contract](https://learn.figment.io/network-documentation/near/tutorials/1-project_overview/8-stake-pool-contract#how-to-operate-the-stake-pool-contract)
network-documentation/near/tutorials/1-project_overview/7-stake-vision.md:23:The [STAKE](https://github.com/oysterpack/oysterpack-near-stake-token) Token provides a solution by issuing fungible tokens for your staked NEAR, which I covered in my prior [You Can Have Your Stake and Trade It Too](https://learn.figment.io/network-documentation/near/tutorials/1-project_overview/3-stake-fungible-token).
network-documentation/near/tutorials/write-nft-contracts-in-rust.md:23:* Install node.js and npm, and set up your DataHub environment [\(see Tutorial 1\)](https://learn.figment.io/network-documentation/near/tutorials/1.-connecting-to-a-near-node-using-datahub)
network-documentation/near/tutorials/write-nft-contracts-in-rust.md:24:* Create an account on the NEAR Testnet [\(see Tutorial 2\)](https://learn.figment.io/network-documentation/near/tutorials/2.-creating-your-first-near-account-using-the-sdk)
network-documentation/near/tutorials/write-nft-contracts-in-rust.md:25:* Install the NEAR CLI [\(also in Tutorial 2\)](https://learn.figment.io/network-documentation/near/tutorials/2.-creating-your-first-near-account-using-the-sdk)
network-documentation/matic/tutorials/Build-a-Social-Media-DApp-and-Deploy-it-on-Polygon.md:681:**IMPORTANT: If you encounter any errors while deploying the Solidity contracts to Polygon (Matic) then check out the "Dealing with different errors" section of [Deploying and Debugging the Smart Contracts on Polygon](https://learn.figment.io/network-documentation/matic/tutorials/Deploying-and-Debugging-the-Smart-Contracts-on-Polygon) tutorial on Figment learn.**
network-documentation/matic/tutorials/Build-a-Social-Media-DApp-and-Deploy-it-on-Polygon.md:724:* *Deploy & debug on polygon :https://learn.figment.io/network-documentation/matic/tutorials/Deploying-and-Debugging-the-Smart-Contracts-on-Polygon*
network-documentation/secret/tutorials/deploy-your-own-secret-nft.md:3:For a high level introduction to Non-Fungible-Tokens see the [first installment of this series](https://learn.figment.io/network-documentation/secret/tutorials/create-your-first-secret-nft). In this tutorial we will download and compile the [snip721 reference implementation](https://github.com/baedrik/snip721-reference-impl), deploy it onto the secret testnet and interact with the contract, minting your own secret NFTs. Unlike the [previous tutorial](https://learn.figment.io/network-documentation/secret/tutorials/create-your-first-secret-nft) we will configure the contract ourselves and learn about access right management of secret contracts and tokens on the way.
network-documentation/secret/tutorials/delegate-and-unbond-tokens.md:13:* Install node.js and npm, and set up your DataHub environment [\(see Tutorial 1\)](https://learn.figment.io/network-documentation/secret/tutorials/1.-connecting-to-a-secret-node-using-datahub)
network-documentation/secret/tutorials/delegate-and-unbond-tokens.md:14:* Create an account on the Secret testnet [\(see Tutorial 2\)](https://learn.figment.io/network-documentation/secret/tutorials/2.-setting-up-your-wallet)
network-documentation/secret/tutorials/delegate-and-unbond-tokens.md:15:* Make sure you have testnet tokens in your account [\(see Tutorial 3\)](https://learn.figment.io/network-documentation/secret/tutorials/3.-querying-the-secret-blockchain)
network-documentation/secret/tutorials/creating-a-secret-contract-from-scratch.md:17:To generate a new project we follow the directions from the [Secret Pathway Tutorial 5](https://learn.figment.io/network-documentation/secret/tutorials/5.-writing-and-deploying-your-first-secret-contract#generate-the-smart-contract-project), however we choose a new name, in this case `reminder`.
network-documentation/secret/tutorials/creating-a-secret-contract-from-scratch.md:33:The key difference between `handle` and `query` is that `handle` can execute transactions that change the state of the storage, whereas `query` is read-only. `handle` transactions therefore require a gas payment from the requester in order to succeed, but a `query` does not[1](creating-a-secret-contract-from-scratch.md#f1). You can see this in the `customFees` object created in the Figment Learn [Tutorial 5](https://learn.figment.io/network-documentation/secret/tutorials/5.-writing-and-deploying-your-first-secret-contract#deploying-the-contract).
network-documentation/secret/tutorials/adding-viewing-keys-to-secret-contract.md:3:In this tutorial we will demonstrate how to add Viewing Key code to the reminder secret contract that we built in the [Developing your first secret contract](https://learn.figment.io/network-documentation/secret/tutorials/creating-a-secret-contract-from-scratch) tutorial. In that tutorial we implemented code to store and read a private reminder for a user. As implemented, each read of the reminder costs gas, which is not ideal. We will show here how a *viewing key* can be used to implement the same functionality in way that does not require the user to send a gas payment every time they want to read the reminder. 
celo/tutorials/celo-node-video-tutorial.md:142:To learn about ".env" files check out this [guide]( https://learn.figment.io/network-documentation/extra-guides/dotenv-and-.env).
link.txt:1:network-documentation/extra-guides/rust-learning-resources.md:69:  * Check out the Learn tutorial - [Write and deploy a smart contract in Rust](https://learn.figment.io/network-documentation/near/tutorials/write-and-deploy-a-smart-contract-on-near)
link.txt:2:network-documentation/celo/tutorial/build-a-dao-on-celo.md:611:Note: If you have never built an app using React Native to connect to the Celo wallet before, you can follow the guide [here](https://learn.figment.io/network-documentation/celo/tutorial/how-to-successfully-connect-to-a-celo-wallet-with-a-react-native-dapp#project-setup%20).
link.txt:3:network-documentation/celo/tutorial/celo-truffle-deploy.md:303:Now that you've learned how to deploy smart contracts on Celo, you can build new use cases for the cryptoeconomy on Celo. Feel free to learn more Solidity, or continue the tutorials on [Figment Learn](https://learn.figment.io).
link.txt:4:network-documentation/celo/tutorial/deploying-smart-contracts-on-celo-with-truffle.md:301:Now that you've learned how to deploy smart contracts on Celo using Truffle, you can build new use cases for the cryptoeconomy on Celo! To learn more Solidity, check out Solidity by Example. You can also continue the other tutorials on [Figment Learn](https://learn.figment.io/).
link.txt:5:network-documentation/celo/tutorial/how-to-run-a-celo-full-node-in-a-virtual-machine.md:132:To learn about `.env` files check out this [guide](https://learn.figment.io/network-documentation/extra-guides/dotenv-and-.env).
link.txt:6:network-documentation/celo/tutorial/create-vault-smart-contract.md:18:  - [Connect to Celo node with DataHub](https://learn.figment.io/network-documentation/celo/tutorial/1.connect)
link.txt:7:network-documentation/celo/tutorial/create-vault-smart-contract.md:19:  - [Query the Celo Network](https://learn.figment.io/network-documentation/celo/tutorial/3.query)
link.txt:8:network-documentation/celo/tutorial/create-vault-smart-contract.md:20:  - [Submit your first transactions](https://learn.figment.io/network-documentation/celo/tutorial/4.transactions)
link.txt:9:network-documentation/celo/tutorial/distributed-file-manager-using-ipfs-celo-reactjs.md:272:Create a `.env` file in the project root folder. Please take a note that dot \(.\) is necessary for the `.env` file name. Now copy your Celo wallet's mnemonic in the .env file as shown below. In the .env file, **MNEMONIC** should be enclosed within double-quotes \(" "\). If you are facing any difficulty in setting up .env file then please refer to **Extra Guides** on [dotenv and .env](https://learn.figment.io/network-documentation/extra-guides/dotenv-and-.env).
link.txt:10:network-documentation/celo/tutorial/celo-complete-dao-dapp/create-a-react-native-app.md:13:If you have not built an app using React Native to connect to the Celo wallet before, you can follow the guide [here](https://learn.figment.io/network-documentation/celo/tutorial/how-to-successfully-connect-to-a-celo-wallet-with-a-react-native-dapp#project-setup
link.txt:11:network-documentation/celo/tutorial/how-to-build-a-dao-on-celo/building-the-react-native-app.md:3:Note: If you have never built an app using React Native to connect to the Celo wallet before, you can follow the guide [here](https://learn.figment.io/network-documentation/celo/tutorial/how-to-successfully-connect-to-a-celo-wallet-with-a-react-native-dapp#project-setup%20).
link.txt:12:network-documentation/avalanche/tutorials/creating-an-nft-part-1.md:17:Each NFT belongs to a **family**, which has a name and a symbol. Each family is composed of **groups**. The number of groups in a family is specified when the family is created. Our NFT will exist on the X-Chain, so to create our NFT family we’ll call `avm.createNFTAsset`, which is a method of the [X-Chain’s API.](https://learn.figment.io/network-documentation/avalanche/rpc-and-rest-api/avm-api)
link.txt:13:network-documentation/avalanche/tutorials/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask.md:7:Avalanche's Primary Network is a subnet that has three chains: P-Chain, X-Chain, and C-Chain. The C-Chain is an instance of the Ethereum Virtual Machine powered by Avalanche’s Snowman consensus protocol. The [C-Chain RPC](https://learn.figment.io/network-documentation/avalanche/rpc-and-rest-api/evm-api) can do anything a typical Ethereum client can by using the Ethereum-standard RPC calls. The immediate benefits of using the C-Chain rather than Ethereum are all of the benefits of using Avalanche. These properties could considerably improve the performance of DApps and the user experience.
link.txt:14:network-documentation/avalanche/tutorials/unit-testing-in-solidity.md:11:This tutorial builds on a previously written tutorial on avalanche, so before we proceed any further make sure to complete - [Making an advanced e-Voting dApp on Avalanche Fuji network using Trufflesuite](https://learn.figment.io/network-documentation/avalanche/tutorials/making-advanced-e-voting-dapp-avalanche-fuji-using-trufle).
link.txt:15:network-documentation/avalanche/tutorials/using-hardhat-with-the-avalanche-c-chain.md:13:* [Avash Installation](https://learn.figment.io/network-documentation/avalanche/tutorials/local-avalanche-network-using-avash)
link.txt:16:network-documentation/avalanche/tutorials/advanced-evoting-avalanche-reactjs.md:3:In the tutorial [Making advanced e-voting dApp](https://learn.figment.io/network-documentation/avalanche/tutorials/making-advanced-e-voting-dapp-avalanche-fuji-using-trufle) we have learned to build smart contracts, deploy them on Avalanche and interact with them using jQuery.
link.txt:17:network-documentation/avalanche/tutorials/advanced-evoting-avalanche-reactjs.md:189:Create a `.env` file in the project root folder. Please take a note that dot \(.\) is necessary for the `.env` file name. Now copy your Datahub's Avalanche API key and the Avalanche wallet's mnemonic in the .env file as shown below. In the .env file, **MNEMONIC** should be enclosed within double-quotes \(" "\). If you are facing any difficulty in setting up .env file then please refer to **Extra Guides** on [dotenv and .env](https://learn.figment.io/network-documentation/extra-guides/dotenv-and-.env).
link.txt:18:network-documentation/avalanche/tutorials/nft-tutorials/creating-an-nft-part-1.md:23:Each NFT belongs to a **family**, which has a name and a symbol. Each family is composed of **groups**. The number of groups in a family is specified when the family is created. Our NFT will exist on the X-Chain, so to create our NFT family we’ll call `avm.createNFTAsset`, which is a method of the [X-Chain’s API.](https://learn.figment.io/network-documentation/avalanche/rpc-and-rest-api/avm-api)
link.txt:19:network-documentation/avalanche/tutorials/nft-tutorials/create-nfts-with-the-avalanche-wallet.md:87:Now, you should know how to create NFT families, mint NFT groups, and send them to other addresses. Have fun with it! If you would like to know the technical background of how NFTs work on the Avalanche network or would like to build products using NFTs, please check out the [NFT tutorial](https://learn.figment.io/network-documentation/avalanche/tutorials/creating-an-nft-part-1). 
link.txt:20:network-documentation/avalanche/tutorials/nft-tutorials/create-nft-with-royalties.md:11:In preparation for the tutorial, you will need to have a basic understanding of [Remix IDE](https://remix.ethereum.org/) and Solidity [smart contracts](https://solidity-by-example.org/). Please refer to the Avalanche [smart contract tutorial](https://learn.figment.io/network-documentation/avalanche/tutorials/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask) for more information on the Avalanche wallet.
link.txt:21:network-documentation/avalanche/tutorials/nft-tutorials/create-nft-with-royalties.md:106:Next, download and install the Metamask wallet for your browser. Create a new wallet in Metamask, then [follow our quick guide](https://learn.figment.io/network-documentation/avalanche/tutorials/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask#step-1-setting-up-metamask) to connect to the Avalanche Fuji C-Chain. You will need to have a valid DataHub API key for Avalanche. 
link.txt:22:network-documentation/avalanche/tutorials/nft-tutorials/create-nft-with-royalties.md:126:Thank you for completing this tutorial, you should now know how to create an NFT with royalties on Avalanche using a simple Solidity smart contract. Have fun with it! If you would like to know the technical background of how NFTs work on the Avalanche network or would like to build products using NFTs, please check out this [Avalanche NFT tutorial](https://learn.figment.io/network-documentation/avalanche/tutorials/create-mint-transfer-nft)!.
link.txt:23:network-documentation/avalanche/tutorials/nft-tutorials/create-mint-transfer-nft.md:131:Now, you should know how to create families of collectible NFTs, mint NFTs in groups, and send them to other addresses. Have fun with it! If you would like to know the technical background of how NFTs work on the Avalanche network or would like to build products using NFTs, please check out this [Avalanche NFT tutorial](https://learn.figment.io/network-documentation/avalanche/tutorials/creating-an-nft-part-1)!.
link.txt:24:network-documentation/avalanche/tutorials/dapp-tutorials/advanced-evoting-avalanche-reactjs.md:3:In the tutorial [Making advanced e-voting dApp](https://learn.figment.io/network-documentation/avalanche/tutorials/making-advanced-e-voting-dapp-avalanche-fuji-using-trufle) we have learned to build smart contracts, deploy them on Avalanche and interact with them using jQuery.
link.txt:25:network-documentation/avalanche/tutorials/dapp-tutorials/advanced-evoting-avalanche-reactjs.md:189:Create a `.env` file in the project root folder. Please take a note that dot \(.\) is necessary for the `.env` file name. Now copy your Datahub's Avalanche API key and the Avalanche wallet's mnemonic in the .env file as shown below. In the .env file, **MNEMONIC** should be enclosed within double-quotes \(" "\). If you are facing any difficulty in setting up .env file then please refer to **Extra Guides** on [dotenv and .env](https://learn.figment.io/network-documentation/extra-guides/dotenv-and-.env).
link.txt:26:network-documentation/avalanche/tutorials/dapp-tutorials/create-a-chat-application-using-solidity-and-react.md:8:* Should've completed [Deploy a Smart Contract on Avalanche using Remix and MetaMask](https://learn.figment.io/network-documentation/avalanche/tutorials/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask) tutorial
link.txt:27:network-documentation/avalanche/tutorials/dapp-tutorials/making-advanced-e-voting-dapp-avalanche-fuji-using-trufle.md:3:In the last tutorial on [Making a basic e-voting DApp on Avalanche's Fuji C-Chain](https://learn.figment.io/network-documentation/avalanche/tutorials/making-evoting-dapp-on-avalanche-c-chain-using-truffle), we have learnt how to deploy a smart contract on Avalanche's Fuji C-Chain using Trufflesuite. Along with that we have also coded the client-side application, to easily interact with smart contracts.
link.txt:28:network-documentation/avalanche/tutorials/dapp-tutorials/making-advanced-e-voting-dapp-avalanche-fuji-using-trufle.md:11:You've created an [Avalanche DataHub](https://datahub.figment.io/sign_up?service=avalanche) account and are familiar with [Avalanche's architecture](https://docs.avax.network/learn/platform-overview). Along with that, you've have followed the tutorial on [Making a basic e-voting DApp on Avalanche's Fuji C-Chain](https://learn.figment.io/network-documentation/avalanche/tutorials/making-evoting-dapp-on-avalanche-c-chain-using-truffle), though for the sake of completeness, we will be covering everything from start.
link.txt:29:network-documentation/avalanche/tutorials/dapp-tutorials/making-advanced-e-voting-dapp-avalanche-fuji-using-trufle.md:928:* Don't forget to setup Metamask with `Fuji` testnet and also fund the account with Fuji c-chain test tokens in order to vote. Please refer to this tutorial on [Connecting Datahub to Metamask](https://learn.figment.io/network-documentation/avalanche/tutorials/connect-datahub-to-metamask). You may change address in the Metamask wallet and fund them in order to vote again.
link.txt:30:network-documentation/avalanche/tutorials/dapp-tutorials/making-evoting-dapp-on-avalanche-c-chain-using-truffle.md:576:* Don't forget to setup Metamask with `Fuji` testnet and also fund the account with Fuji c-chain test tokens in order to vote. Please refer to this tutorial on [Connecting Datahub to Metamask](https://learn.figment.io/network-documentation/avalanche/tutorials/connect-datahub-to-metamask). You may change address in the Metamask wallet and fund them in order to vote again.
link.txt:31:network-documentation/avalanche/tutorials/create-a-dex-with-avalanche.md:7:You must have gone through this tutorial [Create a Local Test Network on Avalanche](https://learn.figment.io/network-documentation/avalanche/tutorials/platform-overview/create-a-local-test-network) and have performed a cross-chain swap via the [Transfer AVAX Between X-Chain and C-Chain](https://learn.figment.io/network-documentation/avalanche/tutorials/token-transfer-tutorials/transfer-avax-between-the-x-chain-and-c-chain) tutorial to get AVAX test tokens to your C-Chain address.
link.txt:32:network-documentation/avalanche/tutorials/create-a-dex-with-avalanche.md:708:- https://learn.figment.io/network-documentation/avalanche/tutorials/getting-started-with-smart-contracts-development/using-truffle-with-the-avalanche-c-chain
link.txt:33:network-documentation/avalanche/tutorials/creating-a-fixed-cap-asset.md:15:Our asset will exist on the [X-Chain](https://docs.avax.network/learn/platform-overview#exchange-chain-x-chain), so to create our asset we’ll call `avm.createFixedCapAsset`, a method of the [X-Chain’s API.](https://learn.figment.io/network-documentation/avalanche/rpc-and-rest-api/avm-api)
link.txt:34:network-documentation/avalanche/tutorials/create-nfts-with-the-avalanche-wallet.md:87:Now, you should know how to create NFT families, mint NFT groups, and send them to other addresses. Have fun with it! If you would like to know the technical background of how NFTs work on the Avalanche network or would like to build products using NFTs, please check out the [NFT tutorial](https://learn.figment.io/network-documentation/avalanche/tutorials/creating-an-nft-part-1). 
link.txt:35:network-documentation/avalanche/tutorials/create-a-chat-application-using-solidity-and-react.md:9:* Should've completed [Deploy a Smart Contract on Avalanche using Remix and MetaMask](https://learn.figment.io/network-documentation/avalanche/tutorials/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask) tutorial
link.txt:36:network-documentation/avalanche/tutorials/create-nft-with-royalties.md:11:In preparation for the tutorial, you will need to have a basic understanding of [Remix IDE](https://remix.ethereum.org/) and Solidity [smart contracts](https://solidity-by-example.org/). Please refer to the Avalanche [smart contract tutorial](https://learn.figment.io/network-documentation/avalanche/tutorials/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask) for more information on the Avalanche wallet.
link.txt:37:network-documentation/avalanche/tutorials/create-nft-with-royalties.md:106:Next, download and install the Metamask wallet for your browser. Create a new wallet in Metamask, then [follow our quick guide](https://learn.figment.io/network-documentation/avalanche/tutorials/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask#step-1-setting-up-metamask) to connect to the Avalanche Fuji C-Chain. You will need to have a valid DataHub API key for Avalanche. 
link.txt:38:network-documentation/avalanche/tutorials/create-nft-with-royalties.md:125:Thank you for completing this tutorial, you should now know how to create an NFT with royalties on Avalanche using a simple Solidity smart contract. Have fun with it! If you would like to know the technical background of how NFTs work on the Avalanche network or would like to build products using NFTs, please check out this [Avalanche NFT tutorial](https://learn.figment.io/network-documentation/avalanche/tutorials/create-mint-transfer-nft)!.
link.txt:39:network-documentation/avalanche/tutorials/making-advanced-e-voting-dapp-avalanche-fuji-using-trufle.md:3:In the last tutorial on [Making a basic e-voting DApp on Avalanche's Fuji C-Chain](https://learn.figment.io/network-documentation/avalanche/tutorials/making-evoting-dapp-on-avalanche-c-chain-using-truffle), we have learnt how to deploy a smart contract on Avalanche's Fuji C-Chain using Trufflesuite. Along with that we have also coded the client-side application, to easily interact with smart contracts.
link.txt:40:network-documentation/avalanche/tutorials/making-advanced-e-voting-dapp-avalanche-fuji-using-trufle.md:11:You've created an [Avalanche DataHub](https://datahub.figment.io/sign_up?service=avalanche) account and are familiar with [Avalanche's architecture](https://docs.avax.network/learn/platform-overview). Along with that, you've have followed the tutorial on [Making a basic e-voting DApp on Avalanche's Fuji C-Chain](https://learn.figment.io/network-documentation/avalanche/tutorials/making-evoting-dapp-on-avalanche-c-chain-using-truffle), though for the sake of completeness, we will be covering everything from start.
link.txt:41:network-documentation/avalanche/tutorials/making-advanced-e-voting-dapp-avalanche-fuji-using-trufle.md:931:* Don't forget to setup Metamask with `Fuji` testnet and also fund the account with Fuji c-chain test tokens in order to vote. Please refer to this tutorial on [Connecting Datahub to Metamask](https://learn.figment.io/network-documentation/avalanche/tutorials/connect-datahub-to-metamask). You may change address in the Metamask wallet and fund them in order to vote again.
link.txt:42:network-documentation/avalanche/tutorials/platform-overview/creating-a-fixed-cap-asset.md:15:Our asset will exist on the [X-Chain](https://docs.avax.network/learn/platform-overview#exchange-chain-x-chain), so to create our asset we’ll call `avm.createFixedCapAsset`, a method of the [X-Chain API](https://learn.figment.io/network-documentation/avalanche/rpc-and-rest-api/avm-api).
link.txt:43:network-documentation/avalanche/tutorials/platform-overview/creating-a-variable-cap-asset.md:21:Our asset will exist on the X-Chain, so to create our asset we’ll call `avm.createVariableCapAsset`, which is a method of the [X-Chain’s API.](https://learn.figment.io/network-documentation/avalanche/rpc-and-rest-api/avm-api)
link.txt:44:network-documentation/avalanche/tutorials/making-evoting-dapp-on-avalanche-c-chain-using-truffle.md:576:* Don't forget to setup Metamask with `Fuji` testnet and also fund the account with Fuji c-chain test tokens in order to vote. Please refer to this tutorial on [Connecting Datahub to Metamask](https://learn.figment.io/network-documentation/avalanche/tutorials/connect-datahub-to-metamask). You may change address in the Metamask wallet and fund them in order to vote again.
link.txt:45:network-documentation/avalanche/tutorials/creating-a-variable-cap-asset.md:21:Our asset will exist on the X-Chain, so to create our asset we’ll call `avm.createVariableCapAsset`, which is a method of the [X-Chain’s API.](https://learn.figment.io/network-documentation/avalanche/rpc-and-rest-api/avm-api)
link.txt:46:network-documentation/avalanche/tutorials/create-mint-transfer-nft.md:131:Now, you should know how to create families of collectible NFTs, mint NFTs in groups, and send them to other addresses. Have fun with it! If you would like to know the technical background of how NFTs work on the Avalanche network or would like to build products using NFTs, please check out this [Avalanche NFT tutorial](https://learn.figment.io/network-documentation/avalanche/tutorials/creating-an-nft-part-1)!.
link.txt:47:network-documentation/avalanche/tutorials/create-a-new-blockchain.md:13:[This tutorial](https://learn.figment.io/network-documentation/avalanche/tutorials/create-a-subnet) will guide you through creating a Subnet.
link.txt:48:network-documentation/avalanche/tutorials/create-a-new-blockchain.md:29:The [AVM’s documentation](https://learn.figment.io/network-documentation/avalanche/rpc-and-rest-api/avm-api) specifies that the argument to `avm.buildGenesis` should look like this:
link.txt:49:network-documentation/avalanche/tutorials/getting-started-with-smart-contracts-development/deploy-a-smart-contract-on-avalanche-using-remix-and-metamask.md:7:Avalanche's Primary Network is a subnet that has three chains: P-Chain, X-Chain, and C-Chain. The C-Chain is an instance of the Ethereum Virtual Machine powered by Avalanche’s Snowman consensus protocol. The [C-Chain RPC](https://learn.figment.io/network-documentation/avalanche/rpc-and-rest-api/evm-ap
other/tutorial-guidelines.md:46:* If you mention `.env` and `.gitignore` during the tutorial setup, you can reference the Guides [document](https://learn.figment.io/network-documentation/extra-guides/dotenv-and-.env) we wrote on this.
other/tutorial-guidelines/README.md:52:* If you mention `.env` and `.gitignore` during the tutorial setup, you can reference the Guides [document](https://learn.figment.io/network-documentation/extra-guides/dotenv-and-.env) we wrote on this.
